{"version":3,"sources":["components/Cell.tsx","components/Box.tsx","components/Board.tsx","App.tsx","index.tsx"],"names":["Cell","props","state","number","value","handleChange","bind","handleKeyDown","e","target","length","parseInt","isNaN","this","setState","toString","charAt","key","className","data-row","row","data-col","col","type","onChange","onKeyDown","Component","Box","Array","map","i","Board","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOA2EeA,E,kDA7Db,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IAEDC,MAAQ,CACXC,OAAQ,KACRC,MAAO,IAGT,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBATG,E,yDAYLE,GAEnB,GAA8B,IAA1BA,EAAEC,OAAOL,MAAMM,OAAnB,CAWA,IAAMP,EAASQ,SAASH,EAAEC,OAAOL,OAC5BQ,MAAMT,IAAqC,IAA1BK,EAAEC,OAAOL,MAAMM,QACnCG,KAAKC,SAAS,CACZX,OAAQA,EACRC,MAAOD,EAAOY,iBAflB,CACE,IAAMZ,EAASQ,SAASH,EAAEC,OAAOL,MAAMY,OAAO,IACzCJ,MAAMT,IACTU,KAAKC,SAAS,CACZX,OAAQA,EACRC,MAAOD,EAAOY,gB,oCAeAP,GACN,cAAVA,EAAES,KAAiC,WAAVT,EAAES,KAC7BJ,KAAKC,SAAS,CACZX,OAAQ,KACRC,MAAO,O,+BAKH,IAAD,OACP,OAEE,aADA,CACA,OAAKc,UAAU,OACbC,WAAUN,KAAKZ,MAAMmB,IACrBC,WAAUR,KAAKZ,MAAMqB,IAFvB,SAIE,uBACEC,KAAK,OACLnB,MAAOS,KAAKX,MAAME,MAClBoB,SAAU,SAAChB,GAAD,OAAO,EAAKH,aAAaG,IACnCiB,UAAW,SAACjB,GAAD,OAAO,EAAKD,cAAcC,Y,GAxD5BkB,aCQJC,EAbH,SAAC1B,GACX,OACE,qBAAKiB,UAAS,MAASC,WAAUlB,EAAMG,MAAvC,SACG,YAAIwB,MAAM,IAAIC,KAAI,SAACrB,EAAGsB,GAAJ,OACjB,cAAC,EAAD,CAEEV,IAAKnB,EAAMG,MACXkB,IAAKQ,GAFAA,SCGAC,EAZD,WACZ,OACE,qBAAKb,UAAU,QAAf,SACG,YAAIU,MAAM,IAAIC,KAAI,SAACrB,EAAGsB,GAAJ,OACjB,cAAC,EAAD,CAEE1B,MAAO0B,GADFA,SCEAE,G,MANH,WACV,OACE,cAAC,EAAD,MCFJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6efe07c9.chunk.js","sourcesContent":["import React, { ChangeEvent, Component, KeyboardEvent } from 'react';\r\n\r\ninterface Props {\r\n  readonly row: number;\r\n  readonly col: number;\r\n}\r\n\r\ninterface State {\r\n  number: number | null;\r\n  value: string;\r\n}\r\n\r\nclass Cell extends Component<Props, State> {\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      number: null,\r\n      value: ''\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleKeyDown = this.handleKeyDown.bind(this);\r\n  }\r\n\r\n  private handleChange(e: ChangeEvent<HTMLInputElement>): void {\r\n    // Replace current number with new number\r\n    if (e.target.value.length === 2) {\r\n      const number = parseInt(e.target.value.charAt(1));\r\n      if (!isNaN(number)) {\r\n        this.setState({\r\n          number: number,\r\n          value: number.toString()\r\n        })\r\n      }\r\n      return;\r\n    }\r\n\r\n    const number = parseInt(e.target.value);\r\n    if (!isNaN(number) && e.target.value.length === 1) {\r\n      this.setState({\r\n        number: number,\r\n        value: number.toString()\r\n      })\r\n    }\r\n  }\r\n\r\n  private handleKeyDown(e: KeyboardEvent<HTMLInputElement>): void {\r\n    if (e.key === \"Backspace\" || e.key === \"Delete\") {\r\n      this.setState({\r\n        number: null,\r\n        value: ''\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      //<div className={`square row-${props.row} col-${props.col}`}\r\n      <div className=\"cell\"\r\n        data-row={this.props.row}\r\n        data-col={this.props.col}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.value}\r\n          onChange={(e) => this.handleChange(e)}\r\n          onKeyDown={(e) => this.handleKeyDown(e)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\nimport Cell from './Cell';\r\n\r\ninterface Props {\r\n  readonly value: number;\r\n}\r\n\r\nconst Box = (props: Props) => {\r\n  return (\r\n    <div className={`box`} data-row={props.value}>\r\n      {[...Array(9)].map((e, i) =>\r\n        <Cell\r\n          key={i}\r\n          row={props.value}\r\n          col={i}\r\n        />)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Box;\r\n","import React from 'react';\r\nimport Box from './Box';\r\n\r\nconst Board = () => {\r\n  return (\r\n    <div className=\"board\">\r\n      {[...Array(9)].map((e, i) => \r\n        <Box \r\n          key={i} \r\n          value={i}\r\n        />)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\nimport Board from './components/Board';\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <Board />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}