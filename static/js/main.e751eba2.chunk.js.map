{"version":3,"sources":["classes/sudoku.ts","components/Cell.tsx","components/Box.tsx","components/Board.tsx","components/Game.tsx","App.tsx","index.tsx"],"names":["Sudoku","grid","getGrid","getBox","boxNumber","getLeftColBox","getBoxRow","getMiddleColBox","getRightColBox","console","log","r","boxRow","this","cell","row","col","value","Cell","props","state","number","toString","handleChange","bind","handleKeyDown","e","target","length","parseInt","isNaN","setState","charAt","_cell","update","key","className","type","onChange","onKeyDown","Component","Box","data","map","i","cellData","Board","loadBoxes","sudoku","_boxes","push","boxes","updateGrid","React","Game","getSudoku","game","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e751eba2.chunk.js","sourcesContent":["import CellData from \"../interfaces/CellData\";\r\n\r\nclass Sudoku {\r\n  private grid: number[][];\r\n\r\n  public constructor() {\r\n    this.grid = [\r\n      [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n      [2, 2, 2, 2, 2, 2, 2, 2, 2],\r\n      [3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n      [4, 4, 4, 4, 4, 4, 4, 4, 4],\r\n      [5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n      [6, 6, 6, 6, 6, 6, 6, 6, 6],\r\n      [7, 7, 7, 7, 7, 7, 7, 7, 7],\r\n      [8, 8, 8, 8, 8, 8, 8, 8, 8],\r\n      [9, 9, 9, 9, 9, 9, 9, 9, 9],\r\n    ];\r\n  }\r\n\r\n  public getGrid = (): number[][] => {\r\n    return this.grid;\r\n  }\r\n\r\n  public updateGrid(cell: CellData) {\r\n    console.log(\"update!\");\r\n\r\n    this.grid[cell.row][cell.col] = cell.value;\r\n  }\r\n\r\n  public getBox = (boxNumber: number): number[] => {\r\n    switch (boxNumber) {\r\n      case 0:\r\n      case 3:\r\n      case 6:\r\n        return this.getLeftColBox(this.getBoxRow(boxNumber));\r\n      case 1:\r\n      case 4:\r\n      case 7:\r\n        return this.getMiddleColBox(this.getBoxRow(boxNumber));\r\n      case 2:\r\n      case 5:\r\n      case 8:\r\n        return this.getRightColBox(this.getBoxRow(boxNumber));\r\n      default:\r\n        console.log(\"Unknown box number\");\r\n        return this.getLeftColBox(0);\r\n    }\r\n  }\r\n\r\n  private getBoxRow = (boxNumber: number): number => {\r\n    let r = 0;\r\n    if (boxNumber === 0 || boxNumber === 1 || boxNumber === 2)\r\n      r = 0;\r\n    else if (boxNumber === 3 || boxNumber === 4 || boxNumber === 5)\r\n      r = 1;\r\n    else if (boxNumber === 6 || boxNumber === 7 || boxNumber === 8)\r\n      r = 2;\r\n    return r * 3;\r\n  }\r\n\r\n  private getLeftColBox = (boxRow: number): number[] => {\r\n    return [\r\n      this.grid[boxRow][0], this.grid[boxRow][1], this.grid[boxRow][2],\r\n      this.grid[boxRow + 1][0], this.grid[boxRow + 1][1], this.grid[boxRow + 1][2],\r\n      this.grid[boxRow + 2][0], this.grid[boxRow + 2][1], this.grid[boxRow + 2][2]\r\n    ];\r\n  }\r\n\r\n  private getMiddleColBox = (boxRow: number): number[] => {\r\n    return [\r\n      this.grid[boxRow][3], this.grid[boxRow][4], this.grid[boxRow][5],\r\n      this.grid[boxRow + 1][3], this.grid[boxRow + 1][4], this.grid[boxRow + 1][5],\r\n      this.grid[boxRow + 2][3], this.grid[boxRow + 2][4], this.grid[boxRow + 2][5]\r\n    ];\r\n  }\r\n\r\n  private getRightColBox = (boxRow: number): number[] => {\r\n    return [\r\n      this.grid[boxRow][6], this.grid[boxRow][7], this.grid[boxRow][8],\r\n      this.grid[boxRow + 1][6], this.grid[boxRow + 1][7], this.grid[boxRow + 1][8],\r\n      this.grid[boxRow + 2][6], this.grid[boxRow + 2][7], this.grid[boxRow + 2][8]\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Sudoku;","import React, { ChangeEvent, Component, KeyboardEvent } from 'react';\r\nimport CellData from '../interfaces/CellData';\r\n\r\ninterface Props {\r\n  readonly row: number;\r\n  readonly col: number;\r\n  readonly value: number;\r\n  update: (cellData: CellData) => void;\r\n}\r\n\r\ninterface State {\r\n  number: number | null;\r\n  value: string;\r\n}\r\n\r\nclass Cell extends Component<Props, State> {\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    // TODO: Remove all the state üóëÔ∏è code\r\n    this.state = {\r\n      number: props.value,\r\n      value: props.value.toString()\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleKeyDown = this.handleKeyDown.bind(this);\r\n  }\r\n\r\n  private handleChange(e: ChangeEvent<HTMLInputElement>): void {\r\n    // Replace current number with new number\r\n    if (e.target.value.length === 2) {\r\n      const number = parseInt(e.target.value.charAt(1));\r\n      if (!isNaN(number)) {\r\n        this.setState({\r\n          number: number,\r\n          value: number.toString()\r\n        });\r\n        const _cell: CellData = {\r\n          row: this.props.row,\r\n          col: this.props.col,\r\n          value: number\r\n        }\r\n        this.props.update(_cell);\r\n      }\r\n      return;\r\n    }\r\n\r\n    const number = parseInt(e.target.value);\r\n    if (!isNaN(number) && e.target.value.length === 1) {\r\n      this.setState({\r\n        number: number,\r\n        value: number.toString()\r\n      })\r\n    }\r\n  }\r\n\r\n  private handleKeyDown(e: KeyboardEvent<HTMLInputElement>): void {\r\n    if (e.key === \"Backspace\" || e.key === \"Delete\") {\r\n      this.setState({\r\n        number: null,\r\n        value: ''\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"cell\">\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.value}\r\n          onChange={(e) => this.handleChange(e)}\r\n          onKeyDown={(e) => this.handleKeyDown(e)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\nimport Cell from './Cell';\r\nimport CellData from '../interfaces/CellData';\r\n\r\ninterface Props {\r\n  data: number[];\r\n  readonly value: number;\r\n  update: (cellData: CellData) => void;\r\n}\r\n\r\nconst Box = (props: Props) => {\r\n  return (\r\n    <div className={`box`}>\r\n      {props.data.map((e, i) =>\r\n        <Cell\r\n          key={i}\r\n          row={props.value}\r\n          col={i}\r\n          value={e}\r\n          update={(cellData: CellData) => props.update(cellData)}\r\n        />)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Box;\r\n","import React from 'react';\r\nimport Box from './Box';\r\nimport CellData from '../interfaces/CellData';\r\nimport Sudoku from '../classes/sudoku';\r\n\r\ninterface Props {\r\n  sudoku: Sudoku;\r\n}\r\n\r\ninterface State {\r\n  boxes: number[][];\r\n}\r\n\r\nclass Board extends React.Component<Props, State> {\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      boxes: this.loadBoxes()\r\n    }\r\n\r\n  }\r\n\r\n  private loadBoxes = (): number[][] => {\r\n    const sudoku = this.props.sudoku;\r\n    let _boxes: number[][] = [];\r\n    for (let i = 0; i < 9; i++) {\r\n      _boxes.push(sudoku.getBox(i));\r\n    }\r\n    return _boxes;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"board\">\r\n        {this.state.boxes.map((e, i) =>\r\n          <Box\r\n            key={i}\r\n            data={e}\r\n            value={i}\r\n            update={(cellData: CellData) => this.props.sudoku.updateGrid(cellData)}\r\n          />)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport Sudoku from '../classes/sudoku';\r\nimport Board from './Board';\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\ninterface State {\r\n  game: number;\r\n  sudoku: Sudoku;\r\n}\r\n\r\nclass Game extends React.Component<Props, State> {\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      game: 0,\r\n      sudoku: new Sudoku()\r\n    }\r\n  }\r\n\r\n  private getSudoku = (): Sudoku => {\r\n    return this.state.sudoku;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <h1>Sudoku solver</h1>\r\n        <Board\r\n          key={this.state.game}\r\n          sudoku={this.getSudoku()}\r\n        />\r\n        <button>Solve</button>\r\n        <button onClick={() => console.log(this.getSudoku().getGrid())}>LOG</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport Game from './components/Game';\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}